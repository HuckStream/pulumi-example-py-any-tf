# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ChannelConfigurationArgs', 'ChannelConfiguration']

@pulumi.input_type
class ChannelConfigurationArgs:
    def __init__(__self__, *,
                 body: pulumi.Input[builtins.str],
                 channel_configuration_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a ChannelConfiguration resource.
        :param pulumi.Input[builtins.str] body: The channel configuration document
        """
        pulumi.set(__self__, "body", body)
        if channel_configuration_id is not None:
            pulumi.set(__self__, "channel_configuration_id", channel_configuration_id)

    @property
    @pulumi.getter
    def body(self) -> pulumi.Input[builtins.str]:
        """
        The channel configuration document
        """
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter(name="channelConfigurationId")
    def channel_configuration_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "channel_configuration_id")

    @channel_configuration_id.setter
    def channel_configuration_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "channel_configuration_id", value)


@pulumi.input_type
class _ChannelConfigurationState:
    def __init__(__self__, *,
                 body: Optional[pulumi.Input[builtins.str]] = None,
                 channel_configuration_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering ChannelConfiguration resources.
        :param pulumi.Input[builtins.str] body: The channel configuration document
        """
        if body is not None:
            pulumi.set(__self__, "body", body)
        if channel_configuration_id is not None:
            pulumi.set(__self__, "channel_configuration_id", channel_configuration_id)

    @property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The channel configuration document
        """
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter(name="channelConfigurationId")
    def channel_configuration_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "channel_configuration_id")

    @channel_configuration_id.setter
    def channel_configuration_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "channel_configuration_id", value)


@pulumi.type_token("opensearch:index/channelConfiguration:ChannelConfiguration")
class ChannelConfiguration(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 body: Optional[pulumi.Input[builtins.str]] = None,
                 channel_configuration_id: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Create a ChannelConfiguration resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] body: The channel configuration document
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ChannelConfigurationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ChannelConfiguration resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ChannelConfigurationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ChannelConfigurationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 body: Optional[pulumi.Input[builtins.str]] = None,
                 channel_configuration_id: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ChannelConfigurationArgs.__new__(ChannelConfigurationArgs)

            if body is None and not opts.urn:
                raise TypeError("Missing required property 'body'")
            __props__.__dict__["body"] = body
            __props__.__dict__["channel_configuration_id"] = channel_configuration_id
        super(ChannelConfiguration, __self__).__init__(
            'opensearch:index/channelConfiguration:ChannelConfiguration',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            body: Optional[pulumi.Input[builtins.str]] = None,
            channel_configuration_id: Optional[pulumi.Input[builtins.str]] = None) -> 'ChannelConfiguration':
        """
        Get an existing ChannelConfiguration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] body: The channel configuration document
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ChannelConfigurationState.__new__(_ChannelConfigurationState)

        __props__.__dict__["body"] = body
        __props__.__dict__["channel_configuration_id"] = channel_configuration_id
        return ChannelConfiguration(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def body(self) -> pulumi.Output[builtins.str]:
        """
        The channel configuration document
        """
        return pulumi.get(self, "body")

    @property
    @pulumi.getter(name="channelConfigurationId")
    def channel_configuration_id(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "channel_configuration_id")

