# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['SmPolicyArgs', 'SmPolicy']

@pulumi.input_type
class SmPolicyArgs:
    def __init__(__self__, *,
                 body: pulumi.Input[builtins.str],
                 policy_name: pulumi.Input[builtins.str],
                 primary_term: Optional[pulumi.Input[builtins.float]] = None,
                 seq_no: Optional[pulumi.Input[builtins.float]] = None,
                 sm_policy_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a SmPolicy resource.
        :param pulumi.Input[builtins.str] body: The policy document.
        :param pulumi.Input[builtins.str] policy_name: The name of the SM policy.
        :param pulumi.Input[builtins.float] primary_term: The primary term of the SM policy version.
        :param pulumi.Input[builtins.float] seq_no: The sequence number of the SM policy version.
        """
        pulumi.set(__self__, "body", body)
        pulumi.set(__self__, "policy_name", policy_name)
        if primary_term is not None:
            pulumi.set(__self__, "primary_term", primary_term)
        if seq_no is not None:
            pulumi.set(__self__, "seq_no", seq_no)
        if sm_policy_id is not None:
            pulumi.set(__self__, "sm_policy_id", sm_policy_id)

    @property
    @pulumi.getter
    def body(self) -> pulumi.Input[builtins.str]:
        """
        The policy document.
        """
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> pulumi.Input[builtins.str]:
        """
        The name of the SM policy.
        """
        return pulumi.get(self, "policy_name")

    @policy_name.setter
    def policy_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "policy_name", value)

    @property
    @pulumi.getter(name="primaryTerm")
    def primary_term(self) -> Optional[pulumi.Input[builtins.float]]:
        """
        The primary term of the SM policy version.
        """
        return pulumi.get(self, "primary_term")

    @primary_term.setter
    def primary_term(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "primary_term", value)

    @property
    @pulumi.getter(name="seqNo")
    def seq_no(self) -> Optional[pulumi.Input[builtins.float]]:
        """
        The sequence number of the SM policy version.
        """
        return pulumi.get(self, "seq_no")

    @seq_no.setter
    def seq_no(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "seq_no", value)

    @property
    @pulumi.getter(name="smPolicyId")
    def sm_policy_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "sm_policy_id")

    @sm_policy_id.setter
    def sm_policy_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "sm_policy_id", value)


@pulumi.input_type
class _SmPolicyState:
    def __init__(__self__, *,
                 body: Optional[pulumi.Input[builtins.str]] = None,
                 policy_name: Optional[pulumi.Input[builtins.str]] = None,
                 primary_term: Optional[pulumi.Input[builtins.float]] = None,
                 seq_no: Optional[pulumi.Input[builtins.float]] = None,
                 sm_policy_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering SmPolicy resources.
        :param pulumi.Input[builtins.str] body: The policy document.
        :param pulumi.Input[builtins.str] policy_name: The name of the SM policy.
        :param pulumi.Input[builtins.float] primary_term: The primary term of the SM policy version.
        :param pulumi.Input[builtins.float] seq_no: The sequence number of the SM policy version.
        """
        if body is not None:
            pulumi.set(__self__, "body", body)
        if policy_name is not None:
            pulumi.set(__self__, "policy_name", policy_name)
        if primary_term is not None:
            pulumi.set(__self__, "primary_term", primary_term)
        if seq_no is not None:
            pulumi.set(__self__, "seq_no", seq_no)
        if sm_policy_id is not None:
            pulumi.set(__self__, "sm_policy_id", sm_policy_id)

    @property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The policy document.
        """
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the SM policy.
        """
        return pulumi.get(self, "policy_name")

    @policy_name.setter
    def policy_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "policy_name", value)

    @property
    @pulumi.getter(name="primaryTerm")
    def primary_term(self) -> Optional[pulumi.Input[builtins.float]]:
        """
        The primary term of the SM policy version.
        """
        return pulumi.get(self, "primary_term")

    @primary_term.setter
    def primary_term(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "primary_term", value)

    @property
    @pulumi.getter(name="seqNo")
    def seq_no(self) -> Optional[pulumi.Input[builtins.float]]:
        """
        The sequence number of the SM policy version.
        """
        return pulumi.get(self, "seq_no")

    @seq_no.setter
    def seq_no(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "seq_no", value)

    @property
    @pulumi.getter(name="smPolicyId")
    def sm_policy_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "sm_policy_id")

    @sm_policy_id.setter
    def sm_policy_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "sm_policy_id", value)


@pulumi.type_token("opensearch:index/smPolicy:SmPolicy")
class SmPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 body: Optional[pulumi.Input[builtins.str]] = None,
                 policy_name: Optional[pulumi.Input[builtins.str]] = None,
                 primary_term: Optional[pulumi.Input[builtins.float]] = None,
                 seq_no: Optional[pulumi.Input[builtins.float]] = None,
                 sm_policy_id: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Create a SmPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] body: The policy document.
        :param pulumi.Input[builtins.str] policy_name: The name of the SM policy.
        :param pulumi.Input[builtins.float] primary_term: The primary term of the SM policy version.
        :param pulumi.Input[builtins.float] seq_no: The sequence number of the SM policy version.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SmPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SmPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SmPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SmPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 body: Optional[pulumi.Input[builtins.str]] = None,
                 policy_name: Optional[pulumi.Input[builtins.str]] = None,
                 primary_term: Optional[pulumi.Input[builtins.float]] = None,
                 seq_no: Optional[pulumi.Input[builtins.float]] = None,
                 sm_policy_id: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SmPolicyArgs.__new__(SmPolicyArgs)

            if body is None and not opts.urn:
                raise TypeError("Missing required property 'body'")
            __props__.__dict__["body"] = body
            if policy_name is None and not opts.urn:
                raise TypeError("Missing required property 'policy_name'")
            __props__.__dict__["policy_name"] = policy_name
            __props__.__dict__["primary_term"] = primary_term
            __props__.__dict__["seq_no"] = seq_no
            __props__.__dict__["sm_policy_id"] = sm_policy_id
        super(SmPolicy, __self__).__init__(
            'opensearch:index/smPolicy:SmPolicy',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            body: Optional[pulumi.Input[builtins.str]] = None,
            policy_name: Optional[pulumi.Input[builtins.str]] = None,
            primary_term: Optional[pulumi.Input[builtins.float]] = None,
            seq_no: Optional[pulumi.Input[builtins.float]] = None,
            sm_policy_id: Optional[pulumi.Input[builtins.str]] = None) -> 'SmPolicy':
        """
        Get an existing SmPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] body: The policy document.
        :param pulumi.Input[builtins.str] policy_name: The name of the SM policy.
        :param pulumi.Input[builtins.float] primary_term: The primary term of the SM policy version.
        :param pulumi.Input[builtins.float] seq_no: The sequence number of the SM policy version.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SmPolicyState.__new__(_SmPolicyState)

        __props__.__dict__["body"] = body
        __props__.__dict__["policy_name"] = policy_name
        __props__.__dict__["primary_term"] = primary_term
        __props__.__dict__["seq_no"] = seq_no
        __props__.__dict__["sm_policy_id"] = sm_policy_id
        return SmPolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def body(self) -> pulumi.Output[builtins.str]:
        """
        The policy document.
        """
        return pulumi.get(self, "body")

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> pulumi.Output[builtins.str]:
        """
        The name of the SM policy.
        """
        return pulumi.get(self, "policy_name")

    @property
    @pulumi.getter(name="primaryTerm")
    def primary_term(self) -> pulumi.Output[builtins.float]:
        """
        The primary term of the SM policy version.
        """
        return pulumi.get(self, "primary_term")

    @property
    @pulumi.getter(name="seqNo")
    def seq_no(self) -> pulumi.Output[builtins.float]:
        """
        The sequence number of the SM policy version.
        """
        return pulumi.get(self, "seq_no")

    @property
    @pulumi.getter(name="smPolicyId")
    def sm_policy_id(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "sm_policy_id")

