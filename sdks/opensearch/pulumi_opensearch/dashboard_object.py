# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['DashboardObjectArgs', 'DashboardObject']

@pulumi.input_type
class DashboardObjectArgs:
    def __init__(__self__, *,
                 body: pulumi.Input[builtins.str],
                 dashboard_object_id: Optional[pulumi.Input[builtins.str]] = None,
                 index: Optional[pulumi.Input[builtins.str]] = None,
                 tenant_name: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a DashboardObject resource.
        :param pulumi.Input[builtins.str] body: The JSON body of the dashboard object.
        :param pulumi.Input[builtins.str] index: The name of the index where dashboard data is stored. Does not work with tenant_name.
        :param pulumi.Input[builtins.str] tenant_name: The name of the tenant to which dashboard data associate. Empty string defaults to global tenant.
        """
        pulumi.set(__self__, "body", body)
        if dashboard_object_id is not None:
            pulumi.set(__self__, "dashboard_object_id", dashboard_object_id)
        if index is not None:
            pulumi.set(__self__, "index", index)
        if tenant_name is not None:
            pulumi.set(__self__, "tenant_name", tenant_name)

    @property
    @pulumi.getter
    def body(self) -> pulumi.Input[builtins.str]:
        """
        The JSON body of the dashboard object.
        """
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter(name="dashboardObjectId")
    def dashboard_object_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "dashboard_object_id")

    @dashboard_object_id.setter
    def dashboard_object_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dashboard_object_id", value)

    @property
    @pulumi.getter
    def index(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the index where dashboard data is stored. Does not work with tenant_name.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="tenantName")
    def tenant_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the tenant to which dashboard data associate. Empty string defaults to global tenant.
        """
        return pulumi.get(self, "tenant_name")

    @tenant_name.setter
    def tenant_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "tenant_name", value)


@pulumi.input_type
class _DashboardObjectState:
    def __init__(__self__, *,
                 body: Optional[pulumi.Input[builtins.str]] = None,
                 dashboard_object_id: Optional[pulumi.Input[builtins.str]] = None,
                 index: Optional[pulumi.Input[builtins.str]] = None,
                 tenant_name: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering DashboardObject resources.
        :param pulumi.Input[builtins.str] body: The JSON body of the dashboard object.
        :param pulumi.Input[builtins.str] index: The name of the index where dashboard data is stored. Does not work with tenant_name.
        :param pulumi.Input[builtins.str] tenant_name: The name of the tenant to which dashboard data associate. Empty string defaults to global tenant.
        """
        if body is not None:
            pulumi.set(__self__, "body", body)
        if dashboard_object_id is not None:
            pulumi.set(__self__, "dashboard_object_id", dashboard_object_id)
        if index is not None:
            pulumi.set(__self__, "index", index)
        if tenant_name is not None:
            pulumi.set(__self__, "tenant_name", tenant_name)

    @property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The JSON body of the dashboard object.
        """
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter(name="dashboardObjectId")
    def dashboard_object_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "dashboard_object_id")

    @dashboard_object_id.setter
    def dashboard_object_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dashboard_object_id", value)

    @property
    @pulumi.getter
    def index(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the index where dashboard data is stored. Does not work with tenant_name.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="tenantName")
    def tenant_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the tenant to which dashboard data associate. Empty string defaults to global tenant.
        """
        return pulumi.get(self, "tenant_name")

    @tenant_name.setter
    def tenant_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "tenant_name", value)


@pulumi.type_token("opensearch:index/dashboardObject:DashboardObject")
class DashboardObject(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 body: Optional[pulumi.Input[builtins.str]] = None,
                 dashboard_object_id: Optional[pulumi.Input[builtins.str]] = None,
                 index: Optional[pulumi.Input[builtins.str]] = None,
                 tenant_name: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Create a DashboardObject resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] body: The JSON body of the dashboard object.
        :param pulumi.Input[builtins.str] index: The name of the index where dashboard data is stored. Does not work with tenant_name.
        :param pulumi.Input[builtins.str] tenant_name: The name of the tenant to which dashboard data associate. Empty string defaults to global tenant.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DashboardObjectArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a DashboardObject resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param DashboardObjectArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DashboardObjectArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 body: Optional[pulumi.Input[builtins.str]] = None,
                 dashboard_object_id: Optional[pulumi.Input[builtins.str]] = None,
                 index: Optional[pulumi.Input[builtins.str]] = None,
                 tenant_name: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DashboardObjectArgs.__new__(DashboardObjectArgs)

            if body is None and not opts.urn:
                raise TypeError("Missing required property 'body'")
            __props__.__dict__["body"] = body
            __props__.__dict__["dashboard_object_id"] = dashboard_object_id
            __props__.__dict__["index"] = index
            __props__.__dict__["tenant_name"] = tenant_name
        super(DashboardObject, __self__).__init__(
            'opensearch:index/dashboardObject:DashboardObject',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            body: Optional[pulumi.Input[builtins.str]] = None,
            dashboard_object_id: Optional[pulumi.Input[builtins.str]] = None,
            index: Optional[pulumi.Input[builtins.str]] = None,
            tenant_name: Optional[pulumi.Input[builtins.str]] = None) -> 'DashboardObject':
        """
        Get an existing DashboardObject resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] body: The JSON body of the dashboard object.
        :param pulumi.Input[builtins.str] index: The name of the index where dashboard data is stored. Does not work with tenant_name.
        :param pulumi.Input[builtins.str] tenant_name: The name of the tenant to which dashboard data associate. Empty string defaults to global tenant.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DashboardObjectState.__new__(_DashboardObjectState)

        __props__.__dict__["body"] = body
        __props__.__dict__["dashboard_object_id"] = dashboard_object_id
        __props__.__dict__["index"] = index
        __props__.__dict__["tenant_name"] = tenant_name
        return DashboardObject(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def body(self) -> pulumi.Output[builtins.str]:
        """
        The JSON body of the dashboard object.
        """
        return pulumi.get(self, "body")

    @property
    @pulumi.getter(name="dashboardObjectId")
    def dashboard_object_id(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "dashboard_object_id")

    @property
    @pulumi.getter
    def index(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The name of the index where dashboard data is stored. Does not work with tenant_name.
        """
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="tenantName")
    def tenant_name(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The name of the tenant to which dashboard data associate. Empty string defaults to global tenant.
        """
        return pulumi.get(self, "tenant_name")

